{"version":3,"file":"static/js/430.955e3f95.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/singlePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from \"./error.gif\";\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import \"./singlePage.scss\";\r\nimport { useEffect, useState } from \"react\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n  const [data, setData] = useState({});\r\n  const { id } = useParams();\r\n\r\n  const { getComic, getCharecter, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    dataUpdate();\r\n  }, [id]);\r\n\r\n  const dataUpdate = () => {\r\n    clearError();\r\n    if (dataType === \"comic\") {\r\n      getComic(id)\r\n        .then(onDataLoaded)\r\n        .then(() => setProcess(\"confirmed\"));\r\n    }\r\n    if (dataType === \"char\") {\r\n      getCharecter(id)\r\n        .then(onDataLoaded)\r\n        .then(() => setProcess(\"confirmed\"));\r\n    }\r\n  };\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBanner />\r\n      {setContent(process, Component, data)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SinglePage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nconst useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n\r\nexport default useHttp;\r\n","import useHttp from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, process, setProcess, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=ccbd62db6bd6ac17da5b584b9f880788\";\r\n  const _baseCharOffset = 210;\r\n  const _baseComicsOffset = 4;\r\n\r\n  const getAllCharecters = async (offset = _baseCharOffset, name = \"\") => {\r\n    let url = `${_apiBase}characters?`;\r\n    if (name.length > 0) {\r\n      url = url + `name=${name}&${_apiKey}`;\r\n    } else {\r\n      url = url + `limit=9&offset=${offset}&${_apiKey}`;\r\n    }\r\n    const res = await request(url);\r\n    return res.data.results.map(_transformCharecter);\r\n  };\r\n\r\n  const getCharecter = async (id) => {\r\n    const url = `${_apiBase}characters/${id}?${_apiKey}`;\r\n    const res = await request(url);\r\n    return _transformCharecter(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharecter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = _baseComicsOffset) => {\r\n    const url = `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`;\r\n    const res = await request(url);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const url = `${_apiBase}comics/${id}?${_apiKey}`;\r\n    const res = await request(url);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      url: comics.urls[0].url,\r\n      description: comics.textObjects[0]?.text\r\n        ? comics.textObjects[0].text\r\n        : \"There is no description for this character\",\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} pages`\r\n        : \"No information about the number of pages\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    getAllCharecters,\r\n    getCharecter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpecting process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","data","setData","useState","id","useParams","getComic","getCharecter","clearError","process","setProcess","useMarvelService","useEffect","dataUpdate","then","onDataLoaded","_Fragment","setContent","useHttp","request","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_transformCharecter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","_comics$textObjects$2","title","price","prices","textObjects","text","language","pageCount","getAllCharecters","offset","results","map","res","getAllComics","Skeleton","Spinner"],"sourceRoot":""}