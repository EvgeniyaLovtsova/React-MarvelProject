{"version":3,"file":"static/js/81.754ca201.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charInfo/CharInfo.js","components/charList/CharList.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/mainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from \"./error.gif\";\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\nimport { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n  const { getCharecter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar(), 6000);\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharecter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n  const style =\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ? { objectFit: \"contain\" }\n      : null;\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={style}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description} </p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useEffect, useState } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { getCharecter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.charId]);\n\n  const updateChar = () => {\n    if (!props.charId) {\n      return;\n    }\n\n    clearError();\n    getCharecter(props.charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  // const skeleton = char || loading || error ? null : <Skeleton />;\n  // const errorMessage = error ? <ErrorMessage /> : null;\n  // const spinner = loading ? <Spinner /> : null;\n  // const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {/* {skeleton}\n      {errorMessage}\n      {spinner}\n      {content} */}\n      {setContent(process, View, char)}\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There are no comics with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          const comicId = item.resourceURI.split(\"/\").pop();\n\n          return (\n            <li key={i} className=\"char__comics-item\">\n              <Link to={`/comics/${comicId}`} style={{ width: \"100%\" }}>\n                {item.name}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default CharInfo;\n","import \"./charList.scss\";\nimport { useRef, useState, useEffect, useMemo } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpecting process state\");\n  }\n};\n\nconst CharList = (props) => {\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [characters, setCharacters] = useState([]);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n  const itemRefs = useRef([]);\n\n  const { getAllCharecters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharecters(offset)\n      .then(onListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onListLoaded = async (newCharacters) => {\n    let ended = false;\n    if (newCharacters.length < 9) {\n      ended = true;\n    }\n    setCharacters((characters) => [...characters, ...newCharacters]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEnded(ended);\n  };\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  const renderCharList = (arr) => {\n    const charList = arr.map((char, i) => {\n      const { name, thumbnail, id } = char;\n      const style =\n        thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n          ? { objectFit: \"fill\" }\n          : { objectFit: \"cover\" };\n\n      return (\n        <CSSTransition key={id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            key={id}\n            ref={(el) => (itemRefs.current[i] = el)}\n            tabIndex={0}\n            onClick={() => {\n              props.onCharSelected(id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \" \" || e.key === \"Enter\" || e.key === \"Tab\") {\n                e.preventDefault();\n                this.props.onCharSelected(id);\n                this.focusOnItem(i);\n              }\n            }}\n          >\n            <img src={thumbnail} alt={name} style={style} />\n            <div className=\"char__name\">{name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <>\n        <ul className=\"char__grid\">\n          <TransitionGroup component={null}>{charList}</TransitionGroup>\n        </ul>\n      </>\n    );\n  };\n\n  const elements = useMemo(() => {\n    return setContent(\n      process,\n      () => renderCharList(characters),\n      newItemLoading\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n  onCharSelected: PropTypes.func,\n};\n\nexport default CharList;\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({ error: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\nimport {\r\n  Field,\r\n  Formik,\r\n  Form,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const { getAllCharecters, clearError, process, setProcess } = useMarvelService();\r\n  const [responseRender, setResponseRender] = useState(null);\r\n\r\n  const handleFormSubmit = (name) => {\r\n    clearError();\r\n    getAllCharecters(null, name).then(onCharLoaded).then(() => setProcess('confirmed'));\r\n  };\r\n\r\n  const onCharLoaded = (char) => {\r\n    const characterId = char.length === 0 ? null : char[0].id;\r\n    const message = characterId\r\n      ? `There is! Visit ${char[0].name} page?`\r\n      : \"The character was not found. Check the name and try again\";\r\n    setResponseRender(() => searchServerResponse(message, characterId));\r\n  };\r\n\r\n  const errorMessage = process === 'error' ? (\r\n    <div className=\"error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n\r\n  return (\r\n    <div className=\"search-form\">\r\n      <Formik\r\n        initialValues={{ name: \"\" }}\r\n        validationSchema={yup.object({\r\n          name: yup\r\n            .string()\r\n            .min(3, \"min 3 chars\")\r\n            .required(\"This field is required\"),\r\n        })}\r\n        onSubmit={(values) => handleFormSubmit(values.name)}\r\n      >\r\n        <Form className=\"search-form__wrapper\">\r\n          <label htmlFor=\"name\" className=\"search-form__label\">\r\n            Or find a character by name:\r\n          </label>\r\n          <Field\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Enter name\"\r\n            className=\"search-form__input\"\r\n          />\r\n          <button\r\n            className=\"button button__main\"\r\n            type=\"submit\"\r\n            disabled={process === 'loading'}\r\n          >\r\n            <div className=\"inner\">Find</div>\r\n          </button>\r\n          <FormikErrorMessage component=\"div\" className=\"error\" name=\"name\" />\r\n          {responseRender}\r\n          {errorMessage}\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst searchServerResponse = (message, charId = null) => {\r\n  const char = charId ? (\r\n    <a href={`/character/${charId}`} className=\"button button__secondary\">\r\n      <div className=\"inner\">To page</div>\r\n    </a>\r\n  ) : null;\r\n  const style = charId ? { color: \"#03710E\" } : { color: \"#9F0013\" };\r\n  return (\r\n    <div className=\"search-form__response\">\r\n      <p style={style}>{message}</p>\r\n      {char}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from \"../../resources/img/vision.png\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nconst useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n\r\nexport default useHttp;\r\n","import useHttp from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, process, setProcess, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=ccbd62db6bd6ac17da5b584b9f880788\";\r\n  const _baseCharOffset = 210;\r\n  const _baseComicsOffset = 4;\r\n\r\n  const getAllCharecters = async (offset = _baseCharOffset, name = \"\") => {\r\n    let url = `${_apiBase}characters?`;\r\n    if (name.length > 0) {\r\n      url = url + `name=${name}&${_apiKey}`;\r\n    } else {\r\n      url = url + `limit=9&offset=${offset}&${_apiKey}`;\r\n    }\r\n    const res = await request(url);\r\n    return res.data.results.map(_transformCharecter);\r\n  };\r\n\r\n  const getCharecter = async (id) => {\r\n    const url = `${_apiBase}characters/${id}?${_apiKey}`;\r\n    const res = await request(url);\r\n    return _transformCharecter(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharecter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = _baseComicsOffset) => {\r\n    const url = `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`;\r\n    const res = await request(url);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const url = `${_apiBase}comics/${id}?${_apiKey}`;\r\n    const res = await request(url);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n      url: comics.urls[0].url,\r\n      description: comics.textObjects[0]?.text\r\n        ? comics.textObjects[0].text\r\n        : \"There is no description for this character\",\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} pages`\r\n        : \"No information about the number of pages\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    getAllCharecters,\r\n    getCharecter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpecting process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharecter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","comics","imgStyle","_Fragment","length","map","item","i","comicId","resourceURI","split","pop","Link","to","concat","props","charId","CharInfo","propTypes","PropTypes","onCharSelected","newItemLoading","setNewItemLoading","characters","setCharacters","offset","setOffset","charEnded","setCharEnded","itemRefs","useRef","getAllCharecters","onRequest","initial","onListLoaded","async","ended","newCharacters","renderCharList","arr","charList","CSSTransition","timeout","classNames","ref","el","current","tabIndex","forEach","classList","remove","add","focus","focusOnItem","onKeyPress","e","key","preventDefault","TransitionGroup","component","elements","useMemo","Component","Spinner","Error","disabled","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","searchServerResponse","message","undefined","color","CharSearchForm","responseRender","setResponseRender","characterId","errorMessage","Formik","initialValues","validationSchema","yup","min","required","onSubmit","values","handleFormSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","CharList","decoration","useHttp","request","useCallback","url","method","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharecter","slice","path","extension","urls","items","_transformComics","_comics$textObjects$","_comics$textObjects$2","title","price","prices","textObjects","text","language","pageCount","results","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}